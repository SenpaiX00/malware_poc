// malware_poc.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <iostream>
#include <stdio.h>
#include <Windows.h>
#include <sysinfoapi.h>
#include <winternl.h>
#include <VersionHelpers.h>


int main()
{
//STEP 1 - ENUMERATE THE CURRENT MACHINE TO KNOW WHAT EXE TO PULL

	//if  dwNumberOFProcessor == 1, likely to be VM, so exit and fuck off
	SYSTEM_INFO si;
	OSVERSIONINFOEX osvi;
	DWORDLONG dwlConditionMask = 0;
	int op = VER_GREATER_EQUAL;
	ZeroMemory(&osvi, sizeof(OSVERSIONINFOEX));
	osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);
	osvi.dwMajorVersion = 5;
	osvi.dwMinorVersion = 1;
	osvi.wServicePackMajor = 2;
	osvi.wServicePackMinor = 0;


	GetNativeSystemInfo(&si);
	if (si.dwNumberOfProcessors == 1) { ExitProcess(0); }

	BOOL bVerifyVersionInfo;
	// Initialize the condition mask.

	VER_SET_CONDITION(dwlConditionMask, VER_MAJORVERSION, op);
	VER_SET_CONDITION(dwlConditionMask, VER_MINORVERSION, op);
	VER_SET_CONDITION(dwlConditionMask, VER_SERVICEPACKMAJOR, op);
	VER_SET_CONDITION(dwlConditionMask, VER_SERVICEPACKMINOR, op);

	// Perform the test.

	bVerifyVersionInfo = VerifyVersionInfo(
		&osvi,
		VER_MAJORVERSION | VER_MINORVERSION |
		VER_SERVICEPACKMAJOR | VER_SERVICEPACKMINOR,
		dwlConditionMask);

	if (bVerifyVersionInfo == TRUE) {
		printf("The system meets the requirements.\n"); //logic here to pull exe
	}
	else {
		ExitProcess(0);
	}

}




